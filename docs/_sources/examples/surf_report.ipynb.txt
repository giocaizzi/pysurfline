{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Produce a surf report"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%load_ext autoreload\n",
    "%autoreload 2\n",
    "import matplotlib.pyplot as plt\n",
    "import matplotlib\n",
    "import matplotlib.dates as mdates\n",
    "import datetime\n",
    "import pandas as pd\n",
    "\n",
    "from pysurfline import SpotForecast"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-----\n",
      "ForecastGetter(Type:wave, Status:200)\n",
      "-----\n",
      "ForecastGetter(Type:wind, Status:200)\n",
      "-----\n",
      "ForecastGetter(Type:tides, Status:200)\n",
      "-----\n",
      "ForecastGetter(Type:weather, Status:200)\n"
     ]
    }
   ],
   "source": [
    "params={\n",
    "    \"spotId\":\"5842041f4e65fad6a7708890\",\n",
    "    \"days\":7,\n",
    "    \"intervalHours\":3,\n",
    "    }\n",
    "spot=SpotForecast(params,verbose=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>utcOffset</th>\n",
       "      <th>surf_min</th>\n",
       "      <th>surf_max</th>\n",
       "      <th>surf_optimalScore</th>\n",
       "      <th>swells</th>\n",
       "      <th>utcOffset</th>\n",
       "      <th>speed</th>\n",
       "      <th>direction</th>\n",
       "      <th>directionType</th>\n",
       "      <th>gust</th>\n",
       "      <th>optimalScore</th>\n",
       "      <th>utcOffset</th>\n",
       "      <th>temperature</th>\n",
       "      <th>condition</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>timestamp</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2022-02-13 10:00:00</th>\n",
       "      <td>-10</td>\n",
       "      <td>1.4220</td>\n",
       "      <td>1.8268</td>\n",
       "      <td>0</td>\n",
       "      <td>[{'height': 1.02912, 'period': 8, 'direction':...</td>\n",
       "      <td>-10</td>\n",
       "      <td>27.45028</td>\n",
       "      <td>61.46909</td>\n",
       "      <td>Cross-shore</td>\n",
       "      <td>29.53946</td>\n",
       "      <td>0</td>\n",
       "      <td>-10</td>\n",
       "      <td>22.55325</td>\n",
       "      <td>NIGHT_CLEAR</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-02-13 13:00:00</th>\n",
       "      <td>-10</td>\n",
       "      <td>1.3315</td>\n",
       "      <td>1.6801</td>\n",
       "      <td>0</td>\n",
       "      <td>[{'height': 1.13672, 'period': 8, 'direction':...</td>\n",
       "      <td>-10</td>\n",
       "      <td>26.33655</td>\n",
       "      <td>58.48280</td>\n",
       "      <td>Cross-shore</td>\n",
       "      <td>28.50559</td>\n",
       "      <td>0</td>\n",
       "      <td>-10</td>\n",
       "      <td>22.36676</td>\n",
       "      <td>NIGHT_CLEAR</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-02-13 16:00:00</th>\n",
       "      <td>-10</td>\n",
       "      <td>1.2010</td>\n",
       "      <td>1.4934</td>\n",
       "      <td>0</td>\n",
       "      <td>[{'height': 1.17986, 'period': 8, 'direction':...</td>\n",
       "      <td>-10</td>\n",
       "      <td>26.38725</td>\n",
       "      <td>63.18200</td>\n",
       "      <td>Cross-shore</td>\n",
       "      <td>28.08024</td>\n",
       "      <td>0</td>\n",
       "      <td>-10</td>\n",
       "      <td>22.30981</td>\n",
       "      <td>NIGHT_BRIEF_SHOWERS_POSSIBLE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-02-13 19:00:00</th>\n",
       "      <td>-10</td>\n",
       "      <td>0.9705</td>\n",
       "      <td>1.3267</td>\n",
       "      <td>0</td>\n",
       "      <td>[{'height': 1.0289, 'period': 6, 'direction': ...</td>\n",
       "      <td>-10</td>\n",
       "      <td>26.22154</td>\n",
       "      <td>57.65973</td>\n",
       "      <td>Cross-shore</td>\n",
       "      <td>26.22154</td>\n",
       "      <td>0</td>\n",
       "      <td>-10</td>\n",
       "      <td>22.48560</td>\n",
       "      <td>CLEAR</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-02-13 22:00:00</th>\n",
       "      <td>-10</td>\n",
       "      <td>0.8400</td>\n",
       "      <td>1.1500</td>\n",
       "      <td>0</td>\n",
       "      <td>[{'height': 1.26823, 'period': 6, 'direction':...</td>\n",
       "      <td>-10</td>\n",
       "      <td>21.87551</td>\n",
       "      <td>51.86909</td>\n",
       "      <td>Cross-shore</td>\n",
       "      <td>21.87551</td>\n",
       "      <td>0</td>\n",
       "      <td>-10</td>\n",
       "      <td>22.62952</td>\n",
       "      <td>CLEAR</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     utcOffset  surf_min  surf_max  surf_optimalScore  \\\n",
       "timestamp                                                               \n",
       "2022-02-13 10:00:00        -10    1.4220    1.8268                  0   \n",
       "2022-02-13 13:00:00        -10    1.3315    1.6801                  0   \n",
       "2022-02-13 16:00:00        -10    1.2010    1.4934                  0   \n",
       "2022-02-13 19:00:00        -10    0.9705    1.3267                  0   \n",
       "2022-02-13 22:00:00        -10    0.8400    1.1500                  0   \n",
       "\n",
       "                                                                swells  \\\n",
       "timestamp                                                                \n",
       "2022-02-13 10:00:00  [{'height': 1.02912, 'period': 8, 'direction':...   \n",
       "2022-02-13 13:00:00  [{'height': 1.13672, 'period': 8, 'direction':...   \n",
       "2022-02-13 16:00:00  [{'height': 1.17986, 'period': 8, 'direction':...   \n",
       "2022-02-13 19:00:00  [{'height': 1.0289, 'period': 6, 'direction': ...   \n",
       "2022-02-13 22:00:00  [{'height': 1.26823, 'period': 6, 'direction':...   \n",
       "\n",
       "                     utcOffset     speed  direction directionType      gust  \\\n",
       "timestamp                                                                     \n",
       "2022-02-13 10:00:00        -10  27.45028   61.46909   Cross-shore  29.53946   \n",
       "2022-02-13 13:00:00        -10  26.33655   58.48280   Cross-shore  28.50559   \n",
       "2022-02-13 16:00:00        -10  26.38725   63.18200   Cross-shore  28.08024   \n",
       "2022-02-13 19:00:00        -10  26.22154   57.65973   Cross-shore  26.22154   \n",
       "2022-02-13 22:00:00        -10  21.87551   51.86909   Cross-shore  21.87551   \n",
       "\n",
       "                     optimalScore  utcOffset  temperature  \\\n",
       "timestamp                                                   \n",
       "2022-02-13 10:00:00             0        -10     22.55325   \n",
       "2022-02-13 13:00:00             0        -10     22.36676   \n",
       "2022-02-13 16:00:00             0        -10     22.30981   \n",
       "2022-02-13 19:00:00             0        -10     22.48560   \n",
       "2022-02-13 22:00:00             0        -10     22.62952   \n",
       "\n",
       "                                        condition  \n",
       "timestamp                                          \n",
       "2022-02-13 10:00:00                   NIGHT_CLEAR  \n",
       "2022-02-13 13:00:00                   NIGHT_CLEAR  \n",
       "2022-02-13 16:00:00  NIGHT_BRIEF_SHOWERS_POSSIBLE  \n",
       "2022-02-13 19:00:00                         CLEAR  \n",
       "2022-02-13 22:00:00                         CLEAR  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "report=[]\n",
    "for attr in [\"wave\",\"wind\",\"weather\"]: #exclude \"tides\" because of HIGH LOW exact times\n",
    "    report.append(spot.get_dataframe(attr))\n",
    "report=pd.concat(report,axis=1)\n",
    "report.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>surf_min</th>\n",
       "      <th>surf_max</th>\n",
       "      <th>speed</th>\n",
       "      <th>directionType</th>\n",
       "      <th>surf_height</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>timestamp</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2022-02-13 10:00:00</th>\n",
       "      <td>1.4220</td>\n",
       "      <td>1.8268</td>\n",
       "      <td>27.45028</td>\n",
       "      <td>Cross-shore</td>\n",
       "      <td>1.6244</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-02-13 13:00:00</th>\n",
       "      <td>1.3315</td>\n",
       "      <td>1.6801</td>\n",
       "      <td>26.33655</td>\n",
       "      <td>Cross-shore</td>\n",
       "      <td>1.5058</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-02-13 16:00:00</th>\n",
       "      <td>1.2010</td>\n",
       "      <td>1.4934</td>\n",
       "      <td>26.38725</td>\n",
       "      <td>Cross-shore</td>\n",
       "      <td>1.3472</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-02-13 19:00:00</th>\n",
       "      <td>0.9705</td>\n",
       "      <td>1.3267</td>\n",
       "      <td>26.22154</td>\n",
       "      <td>Cross-shore</td>\n",
       "      <td>1.1486</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-02-13 22:00:00</th>\n",
       "      <td>0.8400</td>\n",
       "      <td>1.1500</td>\n",
       "      <td>21.87551</td>\n",
       "      <td>Cross-shore</td>\n",
       "      <td>0.9950</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-02-14 01:00:00</th>\n",
       "      <td>1.0100</td>\n",
       "      <td>1.0800</td>\n",
       "      <td>21.26102</td>\n",
       "      <td>Cross-shore</td>\n",
       "      <td>1.0450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-02-14 04:00:00</th>\n",
       "      <td>0.7200</td>\n",
       "      <td>1.0200</td>\n",
       "      <td>22.38751</td>\n",
       "      <td>Cross-shore</td>\n",
       "      <td>0.8700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-02-14 07:00:00</th>\n",
       "      <td>0.6900</td>\n",
       "      <td>1.0000</td>\n",
       "      <td>18.86266</td>\n",
       "      <td>Cross-shore</td>\n",
       "      <td>0.8450</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-02-14 10:00:00</th>\n",
       "      <td>0.6300</td>\n",
       "      <td>0.9400</td>\n",
       "      <td>17.91167</td>\n",
       "      <td>Cross-shore</td>\n",
       "      <td>0.7850</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-02-14 13:00:00</th>\n",
       "      <td>0.6300</td>\n",
       "      <td>0.9300</td>\n",
       "      <td>15.01926</td>\n",
       "      <td>Cross-shore</td>\n",
       "      <td>0.7800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-02-14 16:00:00</th>\n",
       "      <td>0.6200</td>\n",
       "      <td>0.9300</td>\n",
       "      <td>16.03864</td>\n",
       "      <td>Cross-shore</td>\n",
       "      <td>0.7750</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-02-14 19:00:00</th>\n",
       "      <td>0.6400</td>\n",
       "      <td>0.9400</td>\n",
       "      <td>19.12129</td>\n",
       "      <td>Offshore</td>\n",
       "      <td>0.7900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-02-14 22:00:00</th>\n",
       "      <td>0.9200</td>\n",
       "      <td>1.0900</td>\n",
       "      <td>19.76244</td>\n",
       "      <td>Offshore</td>\n",
       "      <td>1.0050</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-02-15 01:00:00</th>\n",
       "      <td>1.1900</td>\n",
       "      <td>1.4200</td>\n",
       "      <td>22.39641</td>\n",
       "      <td>Offshore</td>\n",
       "      <td>1.3050</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-02-15 04:00:00</th>\n",
       "      <td>1.8100</td>\n",
       "      <td>2.1600</td>\n",
       "      <td>17.01183</td>\n",
       "      <td>Offshore</td>\n",
       "      <td>1.9850</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-02-15 07:00:00</th>\n",
       "      <td>2.4300</td>\n",
       "      <td>2.9000</td>\n",
       "      <td>11.93210</td>\n",
       "      <td>Offshore</td>\n",
       "      <td>2.6650</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-02-15 10:00:00</th>\n",
       "      <td>3.0300</td>\n",
       "      <td>3.6200</td>\n",
       "      <td>13.79342</td>\n",
       "      <td>Cross-shore</td>\n",
       "      <td>3.3250</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-02-15 13:00:00</th>\n",
       "      <td>3.0800</td>\n",
       "      <td>3.6800</td>\n",
       "      <td>22.26739</td>\n",
       "      <td>Offshore</td>\n",
       "      <td>3.3800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-02-15 16:00:00</th>\n",
       "      <td>3.6100</td>\n",
       "      <td>4.3100</td>\n",
       "      <td>21.37267</td>\n",
       "      <td>Offshore</td>\n",
       "      <td>3.9600</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2022-02-15 19:00:00</th>\n",
       "      <td>4.2100</td>\n",
       "      <td>5.0300</td>\n",
       "      <td>22.08661</td>\n",
       "      <td>Offshore</td>\n",
       "      <td>4.6200</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     surf_min  surf_max     speed directionType  surf_height\n",
       "timestamp                                                                   \n",
       "2022-02-13 10:00:00    1.4220    1.8268  27.45028   Cross-shore       1.6244\n",
       "2022-02-13 13:00:00    1.3315    1.6801  26.33655   Cross-shore       1.5058\n",
       "2022-02-13 16:00:00    1.2010    1.4934  26.38725   Cross-shore       1.3472\n",
       "2022-02-13 19:00:00    0.9705    1.3267  26.22154   Cross-shore       1.1486\n",
       "2022-02-13 22:00:00    0.8400    1.1500  21.87551   Cross-shore       0.9950\n",
       "2022-02-14 01:00:00    1.0100    1.0800  21.26102   Cross-shore       1.0450\n",
       "2022-02-14 04:00:00    0.7200    1.0200  22.38751   Cross-shore       0.8700\n",
       "2022-02-14 07:00:00    0.6900    1.0000  18.86266   Cross-shore       0.8450\n",
       "2022-02-14 10:00:00    0.6300    0.9400  17.91167   Cross-shore       0.7850\n",
       "2022-02-14 13:00:00    0.6300    0.9300  15.01926   Cross-shore       0.7800\n",
       "2022-02-14 16:00:00    0.6200    0.9300  16.03864   Cross-shore       0.7750\n",
       "2022-02-14 19:00:00    0.6400    0.9400  19.12129      Offshore       0.7900\n",
       "2022-02-14 22:00:00    0.9200    1.0900  19.76244      Offshore       1.0050\n",
       "2022-02-15 01:00:00    1.1900    1.4200  22.39641      Offshore       1.3050\n",
       "2022-02-15 04:00:00    1.8100    2.1600  17.01183      Offshore       1.9850\n",
       "2022-02-15 07:00:00    2.4300    2.9000  11.93210      Offshore       2.6650\n",
       "2022-02-15 10:00:00    3.0300    3.6200  13.79342   Cross-shore       3.3250\n",
       "2022-02-15 13:00:00    3.0800    3.6800  22.26739      Offshore       3.3800\n",
       "2022-02-15 16:00:00    3.6100    4.3100  21.37267      Offshore       3.9600\n",
       "2022-02-15 19:00:00    4.2100    5.0300  22.08661      Offshore       4.6200"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "surf=report.copy()[[\"surf_min\",\t\"surf_max\",\"speed\",\"directionType\"]]\n",
    "surf[\"surf_height\"]=surf[[\"surf_min\",\"surf_max\"]].mean(axis=1)\n",
    "surf.head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "any(surf.index.duplicated())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 1800x1200 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "f,ax=plt.subplots(dpi=300)\n",
    "\n",
    "colors={'Cross-shore':\"gold\", 'Offshore':\"green\", 'Onshore':\"r\"}\n",
    "surf[\"hist_color\"]=surf[\"directionType\"].map(colors)\n",
    "ax.grid(axis=\"y\",zorder=0)\n",
    "ax.bar(\n",
    "    surf.index,\n",
    "    surf[\"surf_height\"],\n",
    "    color=surf[\"hist_color\"],\n",
    "    zorder=2,width=0.1\n",
    "    )\n",
    "\n",
    "if surf[\"surf_height\"].max()<2:\n",
    "    ax.set_ylim([0,2])\n",
    "\n",
    "ax.grid(axis=\"y\",zorder=0)\n",
    "ax.grid(axis=\"x\",which=\"major\",zorder=10000)\n",
    "ax.figure.autofmt_xdate()\n",
    "ax.xaxis.set_minor_locator(mdates.HourLocator(byhour=(0,3,6,9,12,15,18,21)))\n",
    "ax.xaxis.set_major_locator(mdates.DayLocator())\n",
    "ax.set(xlabel=\"Date\",ylabel=\"Surf height [m]\")\n",
    "ax.xaxis.set_major_formatter(mdates.DateFormatter('%d-%b'))\n",
    "ax.xaxis.set_minor_formatter(mdates.DateFormatter('%H'))\n",
    "\n",
    "# Rotates and right-aligns the x labels so they don't crowd each other.\n",
    "for label in ax.get_xticklabels(which='major'):\n",
    "    label.set(rotation=0,horizontalalignment='center',size=5)\n",
    "for label in ax.get_xticklabels(which='minor'):\n",
    "    label.set( horizontalalignment='center',size=3)\n",
    "\n",
    "ax.tick_params(axis='x', which='major', pad=10)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "2d92824427b41c6028804632d5278b37df1fc0de77b5e6f8aeb0bbbd2f432773"
  },
  "kernelspec": {
   "display_name": "Python 3.7.12 ('cryptoenv')",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.10"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
